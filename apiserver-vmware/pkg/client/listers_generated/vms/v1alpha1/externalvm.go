/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pkliczewski/provider-operators/apiserver-vmware/pkg/apis/vms/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalVmLister helps list ExternalVms.
type ExternalVmLister interface {
	// List lists all ExternalVms in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalVm, err error)
	// ExternalVms returns an object that can list and get ExternalVms.
	ExternalVms(namespace string) ExternalVmNamespaceLister
	ExternalVmListerExpansion
}

// externalVmLister implements the ExternalVmLister interface.
type externalVmLister struct {
	indexer cache.Indexer
}

// NewExternalVmLister returns a new ExternalVmLister.
func NewExternalVmLister(indexer cache.Indexer) ExternalVmLister {
	return &externalVmLister{indexer: indexer}
}

// List lists all ExternalVms in the indexer.
func (s *externalVmLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalVm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalVm))
	})
	return ret, err
}

// ExternalVms returns an object that can list and get ExternalVms.
func (s *externalVmLister) ExternalVms(namespace string) ExternalVmNamespaceLister {
	return externalVmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalVmNamespaceLister helps list and get ExternalVms.
type ExternalVmNamespaceLister interface {
	// List lists all ExternalVms in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalVm, err error)
	// Get retrieves the ExternalVm from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExternalVm, error)
	ExternalVmNamespaceListerExpansion
}

// externalVmNamespaceLister implements the ExternalVmNamespaceLister
// interface.
type externalVmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalVms in the indexer for a given namespace.
func (s externalVmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalVm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalVm))
	})
	return ret, err
}

// Get retrieves the ExternalVm from the indexer for a given namespace and name.
func (s externalVmNamespaceLister) Get(name string) (*v1alpha1.ExternalVm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("externalvm"), name)
	}
	return obj.(*v1alpha1.ExternalVm), nil
}
